#! /usr/bin/env python3


import argparse
from json import load, dump as save
from sys import argv
from get_task import get
from complete_task import complete
from add import add
from os import environ


def create_parser():
    parser = argparse.ArgumentParser()
    sub_parsers = parser.add_subparsers(dest="subcommand")
    get_parser = sub_parsers.add_parser("get", help="Retrive information on "
                                        "the current journal state.")
    get_parser.add_argument("section", help="Get information on a specfic "
                                            "section of the journal.",
                                            default=None)
    get_parser.add_argument("title", help="Get information on a specfic task.",
                            default=None, nargs="?")
    get_parser.add_argument("--no-flavor", help="Remove flavor text display "
                            "objectives in a line seperated format",
                            action="store_false", dest="flavor")

    complete_parser = sub_parsers.add_parser("complete", help="Complete a "
                                             "specified objective.")
    complete_parser.add_argument("section", help="The section of the objective"
                                 " to complete.")
    complete_parser.add_argument("title", help="The title of the objective to "
                                 "complete.", nargs="?")

    add_parser = sub_parsers.add_parser("add", help="Adds a new objective to "
                                        "the journal in the specified section")
    add_parser.add_argument("section", help="The section for the new journal "
                            "entry.")
    add_parser.add_argument("title", help="The title of new journal entry",
                            nargs="?")
    add_parser.add_argument("due_date", help="The due date of the new entry",
                            nargs="?")

    return parser


subcommands = {"get": get,
               "complete": complete,
               "add": add}


def main():
    parser = create_parser()
    if __name__ == "__main__":
        args = parser.parse_args()
        if args.subcommand in subcommands:
            return subcommands[args.subcommand](args, journal)
        return True


home_dir = environ["HOME"]

with open(f"{home_dir}/.config/questLog", "r+") as journalJSON:
    journal = load(journalJSON)
    message = main()
    journalJSON.truncate(0)
    journalJSON.seek(0)
    save(journal, journalJSON, indent=4, sort_keys=True)
    print(message)
